@using Application.Core.Entities
@model Pedido

@{
    var pedidoId = Model.Id == Guid.Empty && TempData.ContainsKey("NovoPedidoId")
        ? (Guid)TempData["NovoPedidoId"]
        : Model.Id;

    ViewData["Title"] = pedidoId == Guid.Empty ? "Novo Pedido" : $"Pedido #{pedidoId.ToString().Substring(0, 8)}";

    var produtosPedido = ViewBag.ProdutosPedido as IEnumerable<ProdutoPedido> ?? new List<ProdutoPedido>();
    var produtosDisponiveis = ViewBag.ProdutosDisponiveis as IEnumerable<Produto>;
    var clientes = ViewBag.Clientes as IEnumerable<Cliente>;
}

@section Styles {
    <style>
        @@media (max-width: 991.98px) {
            .pedido-product-card {
                border: 1px solid #dee2e6;
                border-radius: 0.25rem;
                margin-bottom: 1rem;
                padding: 1rem;
                background-color: #f8f9fa;
            }
    
            .pedido-product-card .card-title {
                font-size: 1.1rem;
                margin-bottom: 1rem;
                border-bottom: 1px solid #eee;
                padding-bottom: 0.5rem;
            }
    
            .pedido-product-card .form-group {
                margin-bottom: 0.75rem;
            }
    
            .pedido-product-card label {
                font-weight: 500;
                font-size: 0.85rem;
                margin-bottom: 0.25rem;
                display: block;
            }
    
            .pedido-product-card .form-control-plaintext {
                font-weight: 600;
            }
    
            .pedido-product-card .btn {
                width: 100%;
            }
        }

        .quantidade {
            max-width: 100px;
        }
</style>
}


    <!-- Botão de menu para mobile (aparece apenas em telas pequenas) -->
    <button class="btn btn-primary rounded-circle mobile-menu-btn" id="mobileMenuBtn">
        <i class="fas fa-bars"></i>
    </button>

    <!-- Sidebar -->
    <div class="pedido-sidebar" id="pedidoSidebar">
        <div class="pedido-sidebar-resizer" id="sidebarResizer"></div>
        <div class="pedido-sidebar-header" id="sidebarHeader">
            <h6 class="mb-0">Produtos Disponíveis</h6>
            <i class="fas fa-chevron-right" id="sidebarToggleIcon"></i>
        </div>
        <div class="p-3">
            <ul class="nav flex-column">
                @foreach (var produto in produtosDisponiveis)
                {
                    <li class="nav-item">
                        <button class="nav-link text-dark" onclick="adicionarProduto('@produto.Id')">
                            @produto.Descricao1
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>

    <div class="pedido-main-content" id="pedidoMainContent">
        <div class="container-fluid">
            <!-- Cabeçalho -->
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">@(Model.Id == Guid.Empty ? "Novo Pedido" : $"Pedido #{Model.Id.ToString().Substring(0, 8)}")</h1>
                <div class="btn-toolbar mb-2 mb-md-0" style="gap: 1em">
                    <button class="btn btn-sm btn-primary" id="btnFecharReabrir" onclick="fecharOuReabrirPedido()"
                            @(Model.Pago != Pedido.PedidoStatus.Pago || Model.Quantidade == 0 || !Model.Edicao ? "disabled" : "")>
                        <i class="fas fa-check"></i> @(Model.Pago == Pedido.PedidoStatus.Fechado ? "Pedido Fechado" : "Fechar Pedido")
                    </button>
                    <button class="btn btn-sm btn-primary" id="btnSalvarEditar" onclick="salvarOuEditarPedido()"
                            @(Model.Pago == Pedido.PedidoStatus.Fechado ? "disabled" : "")>
                        <i class="fas fa-save"></i> @(Model.Edicao ? "Editar" : "Salvar") Pedido
                    </button>
                </div>
            </div>
        </div>

        <!-- Seção de Informações do Pedido -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>Informações do Pedido</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="clienteSelect">Cliente</label>
                            <select class="form-control" id="clienteSelect">
                                <option value="">Selecione um cliente</option>
                                @foreach (var cliente in clientes)
                                {
                                    <option value="@cliente.Id" selected="@(Model.ClienteId == cliente.Id)">
                                        @cliente.Nome
                                    </option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Status</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="pagoCheckbox" @(Model.Pago == Pedido.PedidoStatus.Pago ? "checked" : "")>
                                <label class="form-check-label" for="pagoCheckbox">
                                    Pedido Pago
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Seção de Produtos -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Produtos do Pedido</h5>
                <div>
                    <span class="badge bg-primary me-2">
                        Quantidade Total: <span id="totalQuantidade">@Model.Quantidade</span>
                    </span>
                    <span class="badge bg-success">
                        Valor Total: <span id="totalValor">@Model.Valor.ToString("C")</span>
                    </span>
                </div>
            </div>
            <div class="card-body">
                <!-- Tabela para desktop -->
                <div class="d-none d-lg-block">
                    <div class="table-responsive">
                        <table class="pedido-product-table table table-striped">
                            <thead>
                                <tr>
                                    <th>Produto</th>
                                    <th>Quantidade</th>
                                    <th>Valor Unitário</th>
                                    <th>Subtotal</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody id="produtosPedido">
                                @foreach (var item in produtosPedido)
                                {
                                    <tr data-produto-id="@item.ProdutoId">
                                        <td>@item.Produto.Descricao1</td>
                                        <td>
                                            <input type="number" value="@item.Quantidade"
                                                   class="form-control quantidade"
                                                   style="width: 80px;"
                                                   min="1"
                                                   onchange="atualizarQuantidade('@item.Id', this.value)"
                                                   oninput="validaQuantidade(this)"
                                                   @(Model.Pago == Pedido.PedidoStatus.Fechado 
                                                   || Model.Pago == Pedido.PedidoStatus.Perdido? "disabled" : "")>
                                        </td>
                                        <td>@item.Valor.ToString("C")</td>
                                        <td>@(item.SubTotal.ToString("C"))</td>
                                        <td>
                                            <button class="btn btn-sm btn-danger"
                                                    onclick="removerProduto('@item.Id')"
                                                    @(Model.Pago == Pedido.PedidoStatus.Fechado 
                                                    || Model.Pago == Pedido.PedidoStatus.Perdido ? "disabled" : "")>
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Cards para mobile -->
                <div class="d-lg-none">
                    <div class="row" id="produtosPedidoCards">
                        @foreach (var item in produtosPedido)
                        {
                            <div class="col-12 mb-3" data-produto-id="@item.ProdutoId">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">@item.Produto.Descricao1</h5>
                                        <div class="row">
                                            <div class="col-6">
                                                <div class="form-group">
                                                    <label>Quantidade</label>
                                                    <input type="number" value="@item.Quantidade"
                                                           class="form-control quantidade"
                                                           min="1"
                                                           onchange="atualizarQuantidade('@item.Id', this.value)"
                                                           oninput="validaQuantidade(this)">
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="form-group">
                                                    <label>Valor Unitário</label>
                                                    <p class="form-control-plaintext">@item.Valor.ToString("C")</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-6">
                                                <div class="form-group">
                                                    <label>Subtotal</label>
                                                    <p class="form-control-plaintext">@item.SubTotal.ToString("C")</p>
                                                </div>
                                            </div>
                                            <div class="col-6 d-flex align-items-end justify-content-end">
                                                <button class="btn btn-sm btn-danger"
                                                        onclick="removerProduto('@item.Id')">
                                                    <i class="fas fa-trash-alt"></i> Remover
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>


@section Scripts {
    <script>
        // Função unificada para salvar/editar
        function salvarOuEditarPedido() {
            const pedidoId = '@pedidoId';
            const clienteId = $('#clienteSelect').val();
            const pago = $('#pagoCheckbox').is(':checked');
            const edicao = @Json.Serialize(Model.Edicao);

            if (!clienteId) {
                Swal.fire('Atenção', 'Selecione um cliente', 'warning');
                return;
            }

            $.ajax({
                url: '/Pedido/SalvarPedido',
                type: 'POST',
                data: {
                    Id: pedidoId,
                    ClienteId: clienteId,
                    Pago: pago,
                    Edicao: !edicao
                },
                success: function(response) {
                    if (response.sucesso) {
                        window.location.href = `/Pedido/Detalhes/${response.dados.pedidoId}`;
                    } else {
                        Swal.fire('Erro', response.Mensagem, 'error');
                    }
                },
                error: function() {
                    Swal.fire('Erro', 'Falha na comunicação com o servidor', 'error');
                }
            });
        }

        function fecharOuReabrirPedido() {
            const pedidoId = '@pedidoId';

            Swal.fire({
                title: 'Aviso!',
                text: "Ao fechar este pedido não será possível reabri-lo",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Fechar Pedido!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Pedido/FecharPedido',
                        type: 'POST',
                        data: {
                            Id: pedidoId
                        },
                        success: function(response) {
                            if (response.sucesso) {
                                window.location.href = `/Pedido/Detalhes/${response.dados.pedidoId}`;
                            } else {
                                Swal.fire('Erro', response.Mensagem, 'error');
                            }
                        },
                        error: function() {
                            Swal.fire('Erro', 'Falha na comunicação com o servidor', 'error');
                        }
                    });
                }
            });
        }

        // Funções para adicionar/atualizar/remover produtos (manter as anteriores)
        function adicionarProduto(produtoId) {
            const produtoExistente = $(`tr[data-produto-id="${produtoId}"]`).length > 0;

            if (produtoExistente){
                validaProdutoExistente();
                return;
            }

            const pedidoId = '@pedidoId';
            const clienteId = $('#clienteSelect').val();

            if (!clienteId || pedidoId === '00000000-0000-0000-0000-000000000000') {
                validaPedidoSalvo();
                return;
            }

            Swal.fire({
                title: 'Quantidade',
                input: 'number',
                inputValue: 1,
                inputAttributes: {
                    min: 1,
                    step: 1
                },
                showCancelButton: true,
                confirmButtonText: 'Adicionar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    const quantidade = parseInt(result.value);
                    if (quantidade > 0) {
                        $.post('/Pedido/AdicionarProdutoPedido', {
                            Id: '@pedidoId',
                            ProdutoId: produtoId,
                            Quantidade: quantidade
                        }, function(response) {
                            if (response.sucesso) {
                                location.reload();
                            } else {
                                Swal.fire('Erro', response.mensagem, 'error');
                            }
                        });
                    }
                }
            });
        }

        function validaProdutoExistente() {
            Swal.fire({
                icon: 'warning',
                title: 'Produto já adicionado',
                text: 'Este produto já está no pedido. Você pode atualizar a quantidade diretamente na tabela.',
                confirmButtonText: 'Entendi'
            });
        }

        function validaPedidoSalvo() {
            Swal.fire({
                icon: 'warning',
                title: 'Salve o pedido primeiro',
                text: 'Selecione um cliente e salve o pedido antes de adicionar produtos.',
                confirmButtonText: 'Entendi',
                footer: '<a href="javascript:salvarPedido()">Clique aqui para salvar o pedido</a>'
            });
        }

        function validaQuantidade(input) {
            if (input.value < 1) {
                input.value = 1;
            }

            input.value = input.value.replace(/[^0-9]/g, '');

            input.value = parseInt(input.value) || 1;
        }

        function atualizarQuantidade(Id, quantidade) {
            quantidade = parseInt(quantidade);
            if (isNaN(quantidade) || quantidade < 1) {
                Swal.fire('Atenção', 'A quantidade deve ser maior que zero', 'warning');
                return;
            }

            $.post('/Pedido/AtualizarQuantidadeProdutoPedido', {
                Id: Id,
                Quantidade: quantidade
            }, function(response) {
                if (!response.sucesso) {
                    Swal.fire('Erro', response.mensagem, 'error');
                }
                location.reload(); // Recarrega para atualizar ambos (tabela e cards)
            });
        }

        function removerProduto(Id) {
            Swal.fire({
                title: 'Tem certeza?',
                text: "Você está prestes a remover este produto do pedido!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sim, remover!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Pedido/RemoverProdutoPedido',
                        type: 'POST',
                        data: { Id: Id },
                        success: function(response) {
                            if (response.sucesso) {
                                location.reload(); // Recarrega para atualizar ambos
                            } else {
                                Swal.fire('Erro', response.mensagem, 'error');
                            }
                        }
                    });
                }
            });
        }

        // Controle do sidebar
        $(document).ready(function() {
            var desabilita = @Json.Serialize(Model.Edicao || Model.Pago == Pedido.PedidoStatus.Perdido);

            if (desabilita) {
                $('#clienteSelect').prop('disabled', true);
                $('#pagoCheckbox').prop('disabled', true);
            }

            // Toggle do sidebar
            $('#sidebarHeader, #mobileMenuBtn').click(function() {
                $('#pedidoSidebar').toggleClass('active');
                $('body').toggleClass('pedido-sidebar-active');
                $('#sidebarToggleIcon').toggleClass('fa-chevron-right fa-chevron-left');
            });

            // Resizer apenas em desktop
            if (window.innerWidth >= 992) {
                const sidebar = $('#pedidoSidebar');
                const resizer = $('#sidebarResizer');

                resizer.on('mousedown', function(e) {
                    e.preventDefault();
                    $(document).on('mousemove', resize);
                    $(document).on('mouseup', stopResize);
                });

                function resize(e) {
                    const newWidth = Math.max(250, Math.min(e.clientX, 400));
                    sidebar.css('width', newWidth + 'px');
                    $('#pedidoMainContent').css('margin-left', newWidth + 'px');
                }

                function stopResize() {
                    $(document).off('mousemove', resize);
                }
            }

            // Ajuste inicial
            if (window.innerWidth >= 992) {
                $('#pedidoSidebar').addClass('active');
            }
        });

        // Ajuste no redimensionamento
        $(window).resize(function() {
            if (window.innerWidth >= 992) {
                $('#pedidoSidebar').addClass('active');
                $('body').addClass('pedido-sidebar-active');
            } else {
                $('#pedidoSidebar').removeClass('active');
                $('body').removeClass('pedido-sidebar-active');
            }
        });

    </script>
}